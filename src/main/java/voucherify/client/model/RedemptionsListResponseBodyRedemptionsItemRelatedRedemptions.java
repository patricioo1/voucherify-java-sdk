/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import voucherify.client.model.RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem;
import voucherify.client.model.RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions {
  public static final String SERIALIZED_NAME_ROLLBACKS = "rollbacks";
  @SerializedName(SERIALIZED_NAME_ROLLBACKS)
  private List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem> rollbacks;

  public static final String SERIALIZED_NAME_REDEMPTIONS = "redemptions";
  @SerializedName(SERIALIZED_NAME_REDEMPTIONS)
  private List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem> redemptions;

  public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions() {
  }

  public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions rollbacks(List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem> rollbacks) {
    
    this.rollbacks = rollbacks;
    return this;
  }

  public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions addRollbacksItem(RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem rollbacksItem) {
    if (this.rollbacks == null) {
      this.rollbacks = new ArrayList<>();
    }
    this.rollbacks.add(rollbacksItem);
    return this;
  }

   /**
   * Get rollbacks
   * @return rollbacks
  **/
  @javax.annotation.Nullable
  public List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem> getRollbacks() {
    return rollbacks;
  }


  public void setRollbacks(List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem> rollbacks) {
    this.rollbacks = rollbacks;
  }


  public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions redemptions(List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem> redemptions) {
    
    this.redemptions = redemptions;
    return this;
  }

  public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions addRedemptionsItem(RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem redemptionsItem) {
    if (this.redemptions == null) {
      this.redemptions = new ArrayList<>();
    }
    this.redemptions.add(redemptionsItem);
    return this;
  }

   /**
   * Get redemptions
   * @return redemptions
  **/
  @javax.annotation.Nullable
  public List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem> getRedemptions() {
    return redemptions;
  }


  public void setRedemptions(List<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem> redemptions) {
    this.redemptions = redemptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions redemptionsListResponseBodyRedemptionsItemRelatedRedemptions = (RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions) o;
    return Objects.equals(this.rollbacks, redemptionsListResponseBodyRedemptionsItemRelatedRedemptions.rollbacks) &&
        Objects.equals(this.redemptions, redemptionsListResponseBodyRedemptionsItemRelatedRedemptions.redemptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rollbacks, redemptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions {\n");
    sb.append("    rollbacks: ").append(toIndentedString(rollbacks)).append("\n");
    sb.append("    redemptions: ").append(toIndentedString(redemptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rollbacks");
    openapiFields.add("redemptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions is not found in the empty JSON string", RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rollbacks") != null && !jsonObj.get("rollbacks").isJsonNull()) {
        JsonArray jsonArrayrollbacks = jsonObj.getAsJsonArray("rollbacks");
        if (jsonArrayrollbacks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rollbacks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rollbacks` to be an array in the JSON string but got `%s`", jsonObj.get("rollbacks").toString()));
          }

          // validate the optional field `rollbacks` (array)
          for (int i = 0; i < jsonArrayrollbacks.size(); i++) {
            RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRollbacksItem.validateJsonElement(jsonArrayrollbacks.get(i));
          };
        }
      }
      if (jsonObj.get("redemptions") != null && !jsonObj.get("redemptions").isJsonNull()) {
        JsonArray jsonArrayredemptions = jsonObj.getAsJsonArray("redemptions");
        if (jsonArrayredemptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("redemptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `redemptions` to be an array in the JSON string but got `%s`", jsonObj.get("redemptions").toString()));
          }

          // validate the optional field `redemptions` (array)
          for (int i = 0; i < jsonArrayredemptions.size(); i++) {
            RedemptionsListResponseBodyRedemptionsItemRelatedRedemptionsRedemptionsItem.validateJsonElement(jsonArrayredemptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.class));

       return (TypeAdapter<T>) new TypeAdapter<RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions>() {
           @Override
           public void write(JsonWriter out, RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions
  * @throws IOException if the JSON string is invalid with respect to RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions
  */
  public static RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions.class);
  }

 /**
  * Convert an instance of RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

